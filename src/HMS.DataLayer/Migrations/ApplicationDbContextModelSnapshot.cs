// <auto-generated />
using System;
using HMS.DataLayer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HMS.DataLayer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("hms")
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HMS.Entities.App.BaseInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool?>("IsImported");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int?>("ParentId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Type")
                        .HasMaxLength(50);

                    b.Property<short?>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("Title")
                        .HasName("IX_BaseInformation");

                    b.ToTable("BaseInformations");
                });

            modelBuilder.Entity("HMS.Entities.App.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BrithDate")
                        .HasColumnType("date");

                    b.Property<int?>("BrithPlaceCityId");

                    b.Property<int?>("BrithPlaceProvianceId");

                    b.Property<int?>("BrithPlaceSectionId");

                    b.Property<int?>("BrithPlaceTownshipId");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<byte?>("Denomation");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("IdentityNumber")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("IdentitySerial")
                        .HasColumnType("varchar(6)");

                    b.Property<string>("IdentitySeries")
                        .HasColumnType("nvarchar(3)");

                    b.Property<short?>("IdentitySeriesNumber");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool?>("IsImported");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("MotherName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("ParentId");

                    b.Property<int?>("RelationId");

                    b.Property<byte?>("Religion");

                    b.Property<byte?>("Sex");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(8);

                    b.HasKey("Id");

                    b.HasIndex("BrithPlaceCityId");

                    b.HasIndex("BrithPlaceProvianceId");

                    b.HasIndex("BrithPlaceSectionId");

                    b.HasIndex("BrithPlaceTownshipId");

                    b.HasIndex("ParentId");

                    b.HasIndex("RelationId");

                    b.HasIndex("FirstName", "LastName", "NationalCode")
                        .HasName("IX_Perosn");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("HMS.Entities.App.PersonAdditionalInformation", b =>
                {
                    b.Property<int>("PersonId");

                    b.Property<byte?>("BloodGroup");

                    b.Property<short?>("ClothingSize");

                    b.Property<short?>("CoverSize");

                    b.Property<string>("EyeColor");

                    b.Property<string>("HairColor");

                    b.Property<short?>("Height");

                    b.Property<short?>("PantsSize");

                    b.Property<short?>("ShoeSize");

                    b.Property<short?>("Weight");

                    b.Property<short?>("Wrist");

                    b.HasKey("PersonId");

                    b.ToTable("PersonAdditionalInformations");
                });

            modelBuilder.Entity("HMS.Entities.App.PersonEducation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Applied");

                    b.Property<decimal?>("Average")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<int>("CertificateTypeId");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<int?>("DepartmentId");

                    b.Property<int?>("FieldStudyId");

                    b.Property<DateTime?>("GraduatedDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool?>("IsImported");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int>("PersonId");

                    b.Property<string>("UniversityName")
                        .HasMaxLength(50);

                    b.Property<byte>("UniversityType");

                    b.HasKey("Id");

                    b.HasIndex("CertificateTypeId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FieldStudyId");

                    b.HasIndex("PersonId");

                    b.HasIndex("UniversityName")
                        .HasName("IX_PersonEducation");

                    b.ToTable("PersonEducations");
                });

            modelBuilder.Entity("HMS.Entities.App.PersonLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Addres");

                    b.Property<int?>("CityId");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool?>("IsImported");

                    b.Property<string>("Mobile")
                        .HasColumnType("varchar(11)");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("OrganizationEmail");

                    b.Property<int>("PersonId");

                    b.Property<string>("PersonalEmail");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(11)");

                    b.Property<int?>("ProvianceId");

                    b.Property<int?>("SectionId");

                    b.Property<int?>("TownshipId");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("Mobile")
                        .HasName("IX_PersonLocation");

                    b.HasIndex("PersonId");

                    b.HasIndex("ProvianceId");

                    b.HasIndex("SectionId");

                    b.HasIndex("TownshipId");

                    b.ToTable("PersonLocations");
                });

            modelBuilder.Entity("HMS.Entities.App.PersonMarriage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<DateTime?>("IncidentDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool?>("IsImported");

                    b.Property<byte>("MarriageDivorce");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("OfficeNumber")
                        .HasMaxLength(10);

                    b.Property<int>("PersonId");

                    b.Property<string>("RegisterNumber")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonMarriages");
                });

            modelBuilder.Entity("HMS.Entities.App.Personnel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CardNumber")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Code")
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("ConditionId");

                    b.Property<byte?>("DegreeApproved");

                    b.Property<byte?>("DegreeSalary");

                    b.Property<DateTime>("EntryDateCorps")
                        .HasColumnType("date");

                    b.Property<DateTime>("EntryDateHealthcare")
                        .HasColumnType("date");

                    b.Property<DateTime>("EntryDateTreatmentcenter")
                        .HasColumnType("date");

                    b.Property<DateTime>("ExportDate")
                        .HasColumnType("date");

                    b.Property<string>("JobCode")
                        .HasColumnType("varchar(40)");

                    b.Property<string>("JobName");

                    b.Property<DateTime>("MembershipDate")
                        .HasColumnType("date");

                    b.Property<int?>("MembershipTypeId");

                    b.Property<int?>("MilitaryBranchId");

                    b.Property<int>("PersonId");

                    b.Property<byte?>("Rating");

                    b.Property<int>("StructureId");

                    b.Property<DateTime>("TransferInDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("TransferOutDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("ConditionId");

                    b.HasIndex("MembershipTypeId");

                    b.HasIndex("MilitaryBranchId");

                    b.HasIndex("PersonId");

                    b.HasIndex("StructureId");

                    b.ToTable("Personnel");
                });

            modelBuilder.Entity("HMS.Entities.App.Structure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("City");

                    b.Property<string>("Code")
                        .HasMaxLength(30);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<bool?>("IsActive");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool?>("IsImported");

                    b.Property<string>("Kousar")
                        .HasMaxLength(5);

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int?>("ParentId");

                    b.Property<string>("Phone")
                        .HasMaxLength(11);

                    b.Property<byte?>("Proviance");

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("Title")
                        .HasName("IX_Structure");

                    b.ToTable("Structures");
                });

            modelBuilder.Entity("HMS.Entities.Identity.AppDataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FriendlyName");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("XmlData");

                    b.HasKey("Id");

                    b.HasIndex("FriendlyName")
                        .IsUnique()
                        .HasFilter("[FriendlyName] IS NOT NULL");

                    b.ToTable("AppDataProtectionKeys");
                });

            modelBuilder.Entity("HMS.Entities.Identity.AppLogItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<int>("EventId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool?>("IsImported");

                    b.Property<string>("LogLevel");

                    b.Property<string>("Logger");

                    b.Property<string>("Message");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("StateJson");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("AppLogItems");
                });

            modelBuilder.Entity("HMS.Entities.Identity.AppSqlCache", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(449);

                    b.Property<DateTimeOffset?>("AbsoluteExpiration");

                    b.Property<DateTimeOffset>("ExpiresAtTime");

                    b.Property<long?>("SlidingExpirationInSeconds");

                    b.Property<byte[]>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAtTime")
                        .HasName("Index_ExpiresAtTime");

                    b.ToTable("AppSqlCache","hms");
                });

            modelBuilder.Entity("HMS.Entities.Identity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool?>("IsImported");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<string>("RoleDescription");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AppRoles");
                });

            modelBuilder.Entity("HMS.Entities.Identity.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool?>("IsImported");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AppRoleClaims");
                });

            modelBuilder.Entity("HMS.Entities.Identity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<DateTimeOffset?>("BirthDate");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .HasMaxLength(450);

                    b.Property<bool>("IsActive");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool>("IsEmailPublic");

                    b.Property<bool?>("IsImported");

                    b.Property<string>("LastName")
                        .HasMaxLength(450);

                    b.Property<DateTimeOffset?>("LastVisitDateTime");

                    b.Property<string>("Location");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("PhotoFileName")
                        .HasMaxLength(450);

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("HMS.Entities.Identity.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool?>("IsImported");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserClaims");
                });

            modelBuilder.Entity("HMS.Entities.Identity.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool?>("IsImported");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserLogins");
                });

            modelBuilder.Entity("HMS.Entities.Identity.UserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool?>("IsImported");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AppUserRoles");
                });

            modelBuilder.Entity("HMS.Entities.Identity.UserToken", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool?>("IsImported");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AppUserTokens");
                });

            modelBuilder.Entity("HMS.Entities.Identity.UserUsedPassword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool?>("IsImported");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserUsedPasswords");
                });

            modelBuilder.Entity("HMS.Entities.App.BaseInformation", b =>
                {
                    b.HasOne("HMS.Entities.App.BaseInformation", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("HMS.Entities.App.Person", b =>
                {
                    b.HasOne("HMS.Entities.App.BaseInformation", "BrithPlaceCity")
                        .WithMany("PersonBrithPlaceCity")
                        .HasForeignKey("BrithPlaceCityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HMS.Entities.App.BaseInformation", "BrithPlaceProviance")
                        .WithMany("PersonBrithPlaceProviance")
                        .HasForeignKey("BrithPlaceProvianceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HMS.Entities.App.BaseInformation", "BrithPlaceSection")
                        .WithMany("PersonBrithPlaceSection")
                        .HasForeignKey("BrithPlaceSectionId");

                    b.HasOne("HMS.Entities.App.BaseInformation", "BrithPlaceTownship")
                        .WithMany("PersonBrithPlaceTownship")
                        .HasForeignKey("BrithPlaceTownshipId");

                    b.HasOne("HMS.Entities.App.Person", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("HMS.Entities.App.BaseInformation", "Relation")
                        .WithMany("PersonRelation")
                        .HasForeignKey("RelationId");
                });

            modelBuilder.Entity("HMS.Entities.App.PersonAdditionalInformation", b =>
                {
                    b.HasOne("HMS.Entities.App.Person", "Person")
                        .WithOne("PersonAdditionalInformation")
                        .HasForeignKey("HMS.Entities.App.PersonAdditionalInformation", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HMS.Entities.App.PersonEducation", b =>
                {
                    b.HasOne("HMS.Entities.App.BaseInformation", "CertificateType")
                        .WithMany("PersonEducationCertificateType")
                        .HasForeignKey("CertificateTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HMS.Entities.App.BaseInformation", "Department")
                        .WithMany("PersonEducationDepartment")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("HMS.Entities.App.BaseInformation", "FieldStudy")
                        .WithMany("PersonEducationFieldStudy")
                        .HasForeignKey("FieldStudyId");

                    b.HasOne("HMS.Entities.App.Person", "Person")
                        .WithMany("PersonEducation")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HMS.Entities.App.PersonLocation", b =>
                {
                    b.HasOne("HMS.Entities.App.BaseInformation", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("HMS.Entities.App.Person", "Person")
                        .WithMany("PersonLocation")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HMS.Entities.App.BaseInformation", "Proviance")
                        .WithMany()
                        .HasForeignKey("ProvianceId");

                    b.HasOne("HMS.Entities.App.BaseInformation", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId");

                    b.HasOne("HMS.Entities.App.BaseInformation", "Township")
                        .WithMany()
                        .HasForeignKey("TownshipId");
                });

            modelBuilder.Entity("HMS.Entities.App.PersonMarriage", b =>
                {
                    b.HasOne("HMS.Entities.App.Person", "Person")
                        .WithMany("PersonMarriage")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HMS.Entities.App.Personnel", b =>
                {
                    b.HasOne("HMS.Entities.App.BaseInformation", "Condition")
                        .WithMany("PersonnelCondition")
                        .HasForeignKey("ConditionId");

                    b.HasOne("HMS.Entities.App.BaseInformation", "MembershipType")
                        .WithMany("PersonnelMembershipType")
                        .HasForeignKey("MembershipTypeId");

                    b.HasOne("HMS.Entities.App.BaseInformation", "MilitaryBranch")
                        .WithMany("PersonnelMilitaryBranch")
                        .HasForeignKey("MilitaryBranchId");

                    b.HasOne("HMS.Entities.App.Person", "Person")
                        .WithMany("Personnel")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HMS.Entities.App.Structure", "Structure")
                        .WithMany("Personnel")
                        .HasForeignKey("StructureId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HMS.Entities.App.Structure", b =>
                {
                    b.HasOne("HMS.Entities.App.Structure", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("HMS.Entities.Identity.RoleClaim", b =>
                {
                    b.HasOne("HMS.Entities.Identity.Role", "Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HMS.Entities.Identity.UserClaim", b =>
                {
                    b.HasOne("HMS.Entities.Identity.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HMS.Entities.Identity.UserLogin", b =>
                {
                    b.HasOne("HMS.Entities.Identity.User", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HMS.Entities.Identity.UserRole", b =>
                {
                    b.HasOne("HMS.Entities.Identity.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HMS.Entities.Identity.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HMS.Entities.Identity.UserToken", b =>
                {
                    b.HasOne("HMS.Entities.Identity.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HMS.Entities.Identity.UserUsedPassword", b =>
                {
                    b.HasOne("HMS.Entities.Identity.User", "User")
                        .WithMany("UserUsedPasswords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
